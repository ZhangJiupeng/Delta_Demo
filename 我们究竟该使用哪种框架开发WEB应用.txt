WEB应用从宏观角度上理解实际上就是一堆具有通信功能的组件集合。

从语言本身的角度来看，函数的调用过程实际上也是一种串行的通信过程，一个函数向另外一个函数发消息主动调用，而被调用的函数则是通过返回参数来回传执行结果，以面向对象开发语言为例，程序由于是独立执行单位，他们之间是自然解耦的；程序中独立的实体类之间自然解耦，函数间从原则上是必须与相关的类进行通信的，所以它并不需要进行解耦合；但是最棘手的问题往往在于实现同一功能的代码单元之间的关联如何进行松耦合，这个时候，制定接口规范就起到了尤为重要的作用。

WEB项目的灵活与否取决于功能模块间的耦合程度，一个优秀的WEB应用允许开发者付出最小的代价来删减程序模块，这是较粗粒度的解耦。与之相比，同一个模块间的不同分层之间的解耦更值得我们去认真设计，因为它直接影响到我们修改程序功能的效率，况且不同的设计模式决定了不同的开发模式与分工。
需要我们首先理解的是松耦合的意义，最直观的体现则是耦合度低的系统当其需求发生改变时程序结构能够很快适应变化，体现出良好的可维护性，而大多数我们看到的应用，或多或少都存在着不正确使用模式设计的情况，导致自己的程序不能很好的适应外界变化，变得尤为脆弱。

再回到对接口的理解，最开始使用接口的时候并不能理解它的意义，因为当时编码并没有考虑到后期维护或者重构的问题，但是在实际项目中我们会发现，在合理的位置加入接口意义重大，在面向接口编码的过程中，我们会直接调用接口声明中提供的规范方法，这使得我们不必再关心此功能的具体实现细节（或者说接口的实现类被我们很好的隔离了），但是有一点不太理想，就是类之间的通信只能通过一个方法的主动调用，然而WEB应用却有着双向通信的显著特点（请注意，这里提到的WEB应用是指同一功能模块间的消息传递，而并不是指某种网络协议），以常用的MVC结构为例，用户借助视图向控制器发出消息，间接请求模型对象的自我更新，当这个流程结束以后，控制器有职责向视图一层发送消息，通知视图进行更新，这种双向通信的模式将实现一组功能的不同层代码串联到了一起，这样虽然实现了功能模块的解耦，却限制了通信的方式，最大的弊端当然也很明显，就是控制器端的压力巨大，而且消息在业务逻辑中只能纵向传递，无法实现视图间通信（AJAX解决方案则过于复杂了）。

为了实现更加灵活的WEB应用，我们逐渐在探索更合适的架构模式，DCI就是一种较为优化的解决方案，不过代价就是可能会增加搭建结构时的代码量。